'''
В регулярных выражениях также используются различные специальные последовательности. 
Их синтаксис записывается как бэкслэш, за которым следует другой символ.
Одна такая специальная последовательность: 
бэкслэш и число между от 1 до 99, например, \1 или \17. Такая последовательность соответствует выражению группы с таким же числом.
'''
import re

pattern = r"(.+) \1"

match = re.match(pattern, "word word")
if match:
    print ("Match 1")

match = re.match(pattern, "?! ?!")
if match:
    print ("Match 2")

match = re.match(pattern, "abc cde")
if match:
    print ("Match 3")
#(.+) \1 - не то же самое, что (.+) (.+), потому что \1 относится к подвыражению первой группы, которое само по себе является совпавшим выражением, а не набором символов регулярного выражения.

'''Есть другие специальные последовательности: \d, \s и \w.
Они означают соответственно цифры (d от англ. digits), пробелы (s от spaces) и символы слов (w от word characters).
В режиме ASCII им соответствуют [0-9], [ \t\n\r\f\v] и [a-zA-Z0-9_].
В режиме Unicode они соответствуют также некоторым другим символам. Например, \w соответствует символам с диакритикой.
Если эти специальные последовательности записаны с заглавными буквами (\D, \S и \W), они имеют противоположное значение.
Например, \D совпадет с любыми символами, кроме цифр.
'''
import re

pattern = r"(\D+\d)"

match = re.match(pattern, "Hi 999!")

if match:
    print("Match 1")

match = re.match(pattern, "1, 23, 456!")
if match:
    print("Match 2")

match = re.match(pattern, " ! $?")
if match:
    print("Match 3")

#(\D+\d) будет искать один (или несколько) нецифровых символов с последующей цифрой

'''
Среди других специальных последовательностей: \A, \Z и \b.
Последовательности \A и \Z означают соответственно начало и конец строки.
Последовательность \b соответствует пустой строке между символами \w и \W, или символами \w и началом или концом строки.
Также неформально она означает словораздел.
Последовательность \B соответствует пустой строке в любом другом месте.
'''
import re

pattern = r"\b(cat)\b"

match = re.search(pattern, "The cat sat!")
if match:
    print ("Match 1")

match = re.search(pattern, "We s>cat<tered?")
if match:
    print ("Match 2")

match = re.search(pattern, "We scattered.")
if match:
    print ("Match 3")